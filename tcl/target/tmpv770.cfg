## JTAG chain configuration TMPV770-Series
#
# (C) 2020-2022 Labforge Inc.
#
# @author Thomas Reidemeister <thomas@labforge.ca>
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

## Global includes
source [find target/swj-dp.tcl]

# RST line configuration unknown, try trst_and_srst
reset_config trst_and_srst

# DAP configuration
if { [info exists DAP_TAPID] } {
    set _DAP_TAPID $DAP_TAPID
} else {
    # See Table A4.6 in TMPV770_RM_A4_Debug_jp_Rev10.pdf
    #set _DAP_TAPID 0x01000031 (doesn't enumerate, use the one from scan_chain)
    set _DAP_TAPID 0x6ba00477
}

## Chip configuration
if { [info exists CHIPNAME] } {
    set _CHIPNAME $CHIPNAME
} else {
    set _CHIPNAME tmpv770
}

set _TARGETNAME $_CHIPNAME.cpu
set _DAPNAME $_CHIPNAME.dap

# Decleare SWJ processor tap
swj_newdap tmpv770 cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_DAP_TAPID -ignore-version -enable

# Mark TAP as DAP
dap create $_DAPNAME -chain-position $_TARGETNAME

# From "A4.6 SWJ-DP製品固有情報" chapter
# FIXME: Add missing R4 cti interfaces
# -ap-num 1
target create $_TARGETNAME.r4dl0 cortex_r4 -endian little -dap $_DAPNAME \
    -coreid 0 \
    -dbgbase 0x942d0000 \
    -ap-num 1

target create $_TARGETNAME.r4dl1 cortex_r4 -endian little -dap $_DAPNAME \
     -coreid 1 \
     -dbgbase 0x94350000 \
     -ap-num 1 \
     -defer-examine

target create $_TARGETNAME.hsm cortex_m -endian little -dap $_DAPNAME \
     -ap-num 2 \
     -dbgbase 0xe000e000

## Base addresses from ROM-table for CA53, unclear from DS what addresses map to debug area
# Those are the debug units for the CA53
set CA53_DBGBASE {0x96c10000 0x96d10000 0x96e10000 0x96f10000 0x97410000 0x97510000 0x97610000 0x97710000}
# This is global cross-trigger for the CA53s
set CA53_CTIBASE {0x96C20000 0x96D20000 0x96E20000 0x96F20000 0x97420000 0x97520000 0x97620000 0x97720000}
# This is the island association for the CA53s
set CA53_ISLAND  {         0          0          0          0          1          1          1          1}
# SMP target placeholder, gets populated by setting up A53s
set smp_targets ""

proc setup_a5x {core_name dbgbase ctibase num boot} {
        global _CHIPNAME
        global _DAPNAME
        global smp_targets
        for { set _core 0 } { $_core < $num } { incr _core } {
                set _TARGETNAME $_CHIPNAME.$core_name.$_core
                set _CTINAME $_TARGETNAME.cti
                cti create $_CTINAME -dap $_DAPNAME -ap-num 1 \
                        -ctibase [lindex $ctibase $_core]
                set _command "target create $_TARGETNAME aarch64 -dap $_DAPNAME \
                        -ap-num 1 -dbgbase [lindex $dbgbase $_core] -cti $_CTINAME"
                if { $_core == 0  && $boot == 1 } {
                        set _targets "$_TARGETNAME"
                } else {
                        set _command "$_command -defer-examine"
                }
                set smp_targets "$smp_targets $_TARGETNAME"
                eval $_command
        }
}
setup_a5x a53 $CA53_DBGBASE $CA53_CTIBASE 8 0

# Mark all A53s as SMP
eval "target smp $smp_targets"

## Memory APs
# on MEM-AP to AXI (presumed)
target create $_TARGETNAME.axi mem_ap -dap $_DAPNAME \
    -ap-num 0
# on MEM-AP to ABP (presumed), Toshiba calls this debug bus
target create $_TARGETNAME.apb mem_ap -dap $_DAPNAME \
    -ap-num 1
